generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Login {
  id                                               Int                 @id @default(autoincrement())
  username                                         String              @unique @db.VarChar(50)
  email                                            String              @unique @db.VarChar(100)
  password                                         String              @db.VarChar(255)
  user_type                                        String              @db.VarChar(20)
  name                                             String?             @db.VarChar(100)
  createdAt                                        DateTime?           @default(now()) @map("created_at") @db.Timestamp(6)
  event                                            event[]
  freelancer_skills                                freelancer_skills[]
  posts                                            posts[]
  project_project_client_idTologin_credentials     project[]           @relation("project_client_idTologin_credentials")
  project_project_freelancer_idTologin_credentials project[]           @relation("project_freelancer_idTologin_credentials")
  project_proposals                                project_proposals[]
  reviews_reviews_reviewed_idTologin_credentials   reviews[]           @relation("reviews_reviewed_idTologin_credentials")
  reviews_reviews_reviewer_idTologin_credentials   reviews[]           @relation("reviews_reviewer_idTologin_credentials")
  user_details                                     user_details?
  user_profiles                                    user_profiles?
  notifications                                    notifications[]

  @@map("login_credentials")
}

model user_details {
  id                Int                 @id @default(autoincrement())
  user_id           Int                 @unique
  first_name        String?             @db.VarChar(50)
  last_name         String?             @db.VarChar(50)
  phone             String?             @unique @db.VarChar(20)
  phone_e164        String?             @db.VarChar(20)
  bio               String?             @db.Text
  profile_picture   String?             @db.VarChar(500)
  website_url       String?             @db.VarChar(500)
  location          String?             @db.VarChar(150)
  date_of_birth     DateTime?           @db.Date
  gender            String?             @db.VarChar(10)
  country           String?             @db.VarChar(100)
  postal_code       String?             @db.VarChar(20)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  login_credentials Login               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  social_links      user_social_links[]
}

model user_social_links {
  id         Int      @id @default(autoincrement())
  user_id    Int
  platform   String   @db.VarChar(50)
  url        String   @db.VarChar(500)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user user_details @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, platform])
}

model categories {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(100)
  posts   posts[]
  project project[]
}

model posts {
  id                Int         @id @default(autoincrement())
  user_id           Int
  author_name       String?     @db.VarChar(255)
  author_avatar     String?     @db.VarChar(255)
  title             String      @db.VarChar(255)
  content           String
  image_url         String?     @db.VarChar(255)
  category_id       Int?
  likes_count       Int         @default(0)
  comments_count    Int         @default(0)
  created_at        DateTime?   @default(now()) @db.Timestamp(6)
  updated_at        DateTime?   @default(now()) @db.Timestamp(6)
  categories        categories? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  login_credentials Login       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model freelancer_skills {
  id                  Int       @id @default(autoincrement())
  freelancer_id       Int
  skill_id            Int
  proficiency_level   Int?
  years_of_experience Decimal?  @db.Decimal(4, 1)
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  login_credentials   Login     @relation(fields: [freelancer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  skills              skills    @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([freelancer_id, skill_id])
}

model skills {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.VarChar(100)
  description       String?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  freelancer_skills freelancer_skills[]
}

model event {
  id                Int       @id @default(autoincrement())
  user_id           Int
  title             String    @db.VarChar(255)
  description       String?
  location          String?   @db.VarChar(255)
  event_date        DateTime  @default(now()) @db.Timestamp(6)
  event_time        String?   @db.VarChar(10)
  category          String?   @db.VarChar(100)
  is_public         Boolean   @default(true)
  max_attendees     Int?
  current_attendees Int       @default(0)
  status            String    @default("active") @db.VarChar(20)
  day               Int // Mantener compatibilidad
  month             Int // Mantener compatibilidad  
  year              Int // Mantener compatibilidad
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  login_credentials Login     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model project {
  id                Int                 @id @default(autoincrement())
  client_id         Int
  freelancer_id     Int?
  title             String              @db.VarChar(255)
  description       String
  budget            Decimal             @db.Decimal(10, 2)
  deadline          DateTime?           @db.Date
  status            String?             @default("open") @db.VarChar(50)
  category_id       Int?
  skills_required   String[]
  priority          String?             @default("medium") @db.VarChar(20)
  completion_date   DateTime?           @db.Date
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  categories        categories?         @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  client            Login               @relation("project_client_idTologin_credentials", fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  freelancer        Login?              @relation("project_freelancer_idTologin_credentials", fields: [freelancer_id], references: [id], onUpdate: NoAction)
  project_proposals project_proposals[]
  reviews           reviews?
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model project_proposals {
  id                Int       @id @default(autoincrement())
  project_id        Int
  freelancer_id     Int
  proposed_budget   Decimal   @db.Decimal(10, 2)
  delivery_time     Int
  proposal_text     String
  status            String?   @default("pending") @db.VarChar(50)
  cover_letter      String?
  portfolio_links   String[]
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  login_credentials Login     @relation(fields: [freelancer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project           project   @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([project_id, freelancer_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id                                                       Int       @id @default(autoincrement())
  project_id                                               Int       @unique
  reviewer_id                                              Int
  reviewed_id                                              Int
  rating                                                   Int
  comment                                                  String?
  created_at                                               DateTime? @default(now()) @db.Timestamp(6)
  project                                                  project   @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  login_credentials_reviews_reviewed_idTologin_credentials Login     @relation("reviews_reviewed_idTologin_credentials", fields: [reviewed_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  login_credentials_reviews_reviewer_idTologin_credentials Login     @relation("reviews_reviewer_idTologin_credentials", fields: [reviewer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_profiles {
  user_id           Int       @id
  avatar            String?   @db.VarChar(255)
  bio               String?
  interests         String?
  profile_views     Int       @default(0)
  projects_count    Int       @default(0)
  connections_count Int       @default(0)
  is_verified       Boolean   @default(false)
  is_active         Boolean   @default(true)
  last_active_at    DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  login_credentials Login     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model notifications {
  id                Int      @id @default(autoincrement())
  user_id           Int
  message           String
  type              String   @db.VarChar(50)
  priority          Int      @default(0) @db.SmallInt
  read_status       Boolean  @default(false)
  related_id        Int?
  related_type      String?  @db.VarChar(50)
  created_at        DateTime @default(now())
  login_credentials Login    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
